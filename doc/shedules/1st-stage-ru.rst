План работ по первому этапу
=====================================

Описание этапа
----------------------

Сроки выполнения первого этапа
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

28.07.2021-28.10.2021

Цель этапа
~~~~~~~~~~~~~~~~~~~~~~~~

Транслятор, который может преобразовывать простые типы и элементарные операции с ними языка C в EOLANG.

Содержание этапа (решаемые задачи)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Анализ методов трансформации и системы LLVM Clang.
2. Определение подмножества языка C, используемого для трансформации в ходе трансляции.
3. Прототип транслятора, реализующий трансформацию простых типов данных и операций с ними.

Результаты, которые необходимо получить по договору
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Подмножество языка C, используемое для трансформации.
2. Транслятор, написанный в качестве дополнительных модулей к Clang
3. 50+ автоматизированных тестов.
4. Технический отчет с кратким описанием деталей реализации.

Пояснения к решаемым задачам
---------------------------------

Анализ методов трансформации и системы LLVM Clang
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Для обеспечения трансформации (транспиляции) необходимо осуществлять анализ абстрактного синтаксического дерева (AST), которое формируется компилятором Сlang во время трансляции исходных текстов на языке программирования C. Для решения этой задачи в системе LLVM Clang существуют различные подходы, доступные через соответствующие библиотеки и инструменты. К ним относятся:

    * библиотека libclang;
    * библиотека libtooling;
    * библиотека libASTMatchers используемая совместно с libtooling.

Выбор одного из первых двух вариантов определяет дальнейшее однозначное использование на последующих этапах. Использование AST Matcher может являться дополнением к libtooling. Но в любом случае до формирования решения необходимо провести предварительное изучение вариантов реализации на основе написания примеров, обеспечивающих анализ AST и формирования выходных представлений для последующей генерации конструкций EOLANG.

.. note::

    Предварительный анализ наталкивает на мысль, что лучше использовать libtooling. Несмотря на большую сложность по сравнению с libclang, а также на изменчивость API данной библиотеки, в результате анализа можно получить более расширенную информацию. Также вполне возможно в последующем использовать AST Matcher, что, судя по анализу ряда проектов вполне может облегчить формирования требуемого анализатора AST. Но нужно еще внимательнно посмотреть, прежде чем принять окончательное решение. Одним из моментов является то, что пока еще непонятен обход AST визитерами. Нужно разобраться с тем, как обеспечить нужную последовательность обхода в ходе анализа или понять, обеспечивает ли этот обход рекурсивный визитер библиотеки.

Определение подмножества языка C, используемого для трансформации в ходе трансляции
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

EOLANG разрабатывается (и на ближайшее будущее тенденция вряд ли изменится) как язык, предназначенный для экспериментов в области статического анализа. Поэтому выразительнных средств, ориентированных на практическое программирование в нем очень мало. В отличие от него язык программирования C ориентирован на задачи разработки системного и инструментального программного  обеспечения, близкого к низкоуровневому, поддерживая при этом и решение прикладных задач широкого класса, что ведет к использованию разнообразных языковых конструкций, прямая реализация средствами EOLANG которых практически невозможна даже при существенным наращивании последнего. Это касается не только EOLANG, но и любых современных языков, ориентированных на прикладное программирование (Java, C#, Python и т.д.).

В принципе любой язык программирования является достаточно универсальным, чтобы смоделировать конструкции другого языка, что вполне может обеспечить соответствующую генерацию кода. Целесообразность такого подхода имеет смысл обсудить в дальнейшем. Однако на первоначальном этапе предполагается провести анализ возможности прямого отображения программных объектов языка C в эквивалентные объекты EOLANG. Для это планируется построить семантические модели EOLANG (в полном объеме) и языка C (в объеме, достаточном для сопоставления). И на первом этапе создания прототипа транспилятора реализовать, используя прямое отображение базовых (атомарных) программных объектов. На основании этого впоследствии можно будет сформулировать выводы о необходимости модификации атомарных объектов EOLANG или построении на их основе производных объектов, в большей степени соответствующих базовым конструкциям языка C.

Прототип транслятора, реализующий трансформацию простых типов данных и операций с ними
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Прототип транспилятора, обеспечивающих первоначально заданные трансформации, предполагается реализовать на основе выбора инструментальных средств и после сопоставления базовых конструкций языка C с атомарными объектами EOLANG. В ходе разработки прототипа планируется сформировать соответствующее тестовое покрытие, а также выбрать систему тестирования, обеспечивающую необходимую автоматизацию. Анали и выбор тестовой системы предполагается начать до написания прототипа.

Понедельное распределение работ по первому этапу
------------------------------------------------------

.. note::

    Недели привязаны к четвергу, на который назначен еженедельный отчетный митинг в компании Huawey.

Неделя 1 (28.07.2021 - 05.08.2021)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Начало анализа инструментальных средств и библиотек LLVM Clang, используемых для реализации транспилятора. Прогон демонстрационных примеров. Определение возможностей по предоставлению требуемой информации.
#. Сбор информации по языку программирования EOLANG для формирования семантической модели.

.. note::

    **По поводу анализа и выбора инструментальных средств.** К сожалению здесь все не делается мгновенно. В целом я занимаюсь уже этим не менее месяца, но пока окончательной картины не сложилось. При этом ведутся конкретные эксперименты с разными библиотеками по решению конкретных практических задач. То есть одновременно просматриваются все альтернативнные варианты реализации одних и тех же решений. Думаю, что еще месяц уйдет на то, чтобы понять, что эффективнее использовать.



Неделя 2 (06.08.2021 - 12.08.2021)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Продолжение анализа инструментальных средств. Добавление в демонстрационные примеры проверок глобальных целочисленных переменных. Анализ получения из абстрактного синтаксического дерева информации необходимой для генерации соответствующих объектов EOLANG.
#. Сбор демонстрационных примеров на языке программирования C, используемых в дальнейшем для формирования тестового покрытия и демонстрации работы транспилятора (данная работа будет продолжаться в течение всего проекта, обеспечивая тем самым накопление тестовой базы требуемого объема).

Неделя 3 (13.08.2021 - 19.08.2021)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Анализ особенностей языка EOLANG. Выделение атомарных объектов и сопоставление их семантики с соответствующими конструкциями языка программирования C.
#. Систематизация демонстрационных примеров на языке программирования C. Их разделение на подгруппы в соответствии с последовательностью разработки компонент транспилятора (данная работа будет продолжаться в течение всего проекта, обеспечивая тем самым накопление тестовой базы требуемого объема).

Результат:

    #. Тестовые примеры на EOLANG.
    #. Начальный набор примеров на C

Неделя 4 (20.08.2021 - 26.08.2021)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Выделение параметров, используемых для описания глобальных переменных. Сопоставление описаний глобальных переменных языка C с соответствующими объектами EOLANG. Формирование таблицы соответствий.
#. Формирование тестовых наборов, обеспечивающих покрытие вариантов описания глобальных целочисленных переменных с учетом использования квалификаторов, константных выражений, описания множества переменных в одном определении и др.
#. Окончательное формирование семантической модели языка EOLANG, используемой для создание программных объектов, формируемых на основе анализа синтаксического дерева.

Результат:

    #. Тестовые примеры на EOLANG с использованием глобальных объектов.
    #. Тестовые наборы с описанием различных вариантов глобальных целочисленных переменных.
    #. Предварительное описание семантической модели языка EOLANG.

Неделя 5 (27.08.2021 - 02.09.2021)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Разработка объекта (объектов), обеспечивающих отображение глобальных целочисленных переменных в EOLANG. Тестирование данных объектов в языке программирования EOLANG.
#. Формирование тестовых наборов, обеспечивающих покрытие вариантов описания глобальных переменных переменных с плавающей точкой, символьных и булевских переменных с учетом использования.
#. Разработка программных объектов семантической модели EOLANG для представления целочисленных переменных.

Результат:

    #. Тестовые примеры на EOLANG с использованием глобальных объектов для предстаавления данных различного типа.
    #. Тестовые наборы с описанием различных вариантов глобальных переменных различного типа.
    #. Представление семантической модели EOLANG на языке C++ (начальная версия).

Неделя 6 (03.09.2021 - 09.09.2021)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Разработка объекта (объектов), обеспечивающих отображение глобальных переменных с плавающей точкой, символьных и булевских переменных в EOLANG. Тестирование данных объектов в языке программирования EOLANG.
#. Разработка фрагмента семантической модели EOLANG для представления абстракных объектов.
#. Разработка фрагментов транспилятора, обеспечивающих генерацию кода в EOLANG для глобальных целочисленных переменных языка C.
#. Разработка тестового покрытия для проверки работоспособности транспилятора на глобальных целочисленных переменных языка C.
#. Сопоставление программных объектов языка C с объектами EOLANG для определения возможностей прямого отображения (Общий анализ займет прмерно 4 недели).

Результат:

    #. Код транспилятора для порождения моделей целочисленных переменных на EOLANG.
    #. Тестовые наборы, обеспечивающие проверку генерации моделей целочисленных переменных.
    #. Представление семантической модели EOLANG на языке C++ (продолжение).

Неделя 7 (10.09.2021 - 16.09.2021)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Разработка объектов EOLANG, имитирующих операции языка C над базовыми типами данных. Тестирование данных объектов совместно с объектами данных в среде EOLANG.
#. Разработка полной семантической модели EOLANG.
#. Разработка фрагментов транспилятора, обеспечивающих генерацию кода в EOLANG для глобальных переменных с плавающей точкой, символьных и булевских переменных языка C.
#. Разработка тестового покрытия для проверки работоспособности транспилятора на глобальных переменных с плавающей точкой, символьных и булевских переменных языка C.

Результат:

    #. Код транспилятора для порождения моделей переменных базового типа на EOLANG.
    #. Тестовые наборы, обеспечивающие проверку генерации моделей переменных базового типа.
    #. Представление семантической модели EOLANG на языке C++ (окончание).

Неделя 8 (17.09.2021 - 23.09.2021)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Разработка объекта имитирующего в EOLANG функции без параметров языка программирования C. Тестирование с использованием средств EOLANG доступа из данного объекта к объектам, имитирующим глобальные переменные простого типа.
#. Комплексное тестирование семантической модели EOLANG.
#. Разработка фрагментов транспилятора, обеспечивающих генерацию кода в EOLANG для базовых операция языка C.
#. Разработка тестового покрытия для проверки работоспособности транспилятора на базовых операциях языка C без параметров и с обращением к глобальным переменным простого типа.

Результат:

    #. Объект, имитирующий функцию без параметров на EOLANG .
    #. Тестовые наборы, для проверки семантической модели EOLANG.
    #. Добавление фрагментов транспилятора, порождающих код для базовых операций.
    #. Тестовые наборы для тестирования базовых операций.

Неделя 9 (24.09.2021 - 30.09.2021)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Разработка объекта имитирующего в EOLANG функции без параметров языка программирования C но с локальными переменными простого типа. Тестирование с использованием средств EOLANG доступа из данного объекта к объектам, имитирующим глобальные и локальные переменные простого типа.
#. Разработка фрагментов транспилятора, обеспечивающих генерацию кода в EOLANG для функций языка C без параметров и с обращением к глобальным переменным простого типа.
#. Разработка тестового покрытия для проверки работоспособности транспилятора на функциях языка C без параметров и с обращением к глобальным переменным простого типа.

Результат:

    #. Объект, имитирующий функцию без параметров и с локальными объектами на EOLANG.
    #. Тестовые наборы, для проверки семантической модели EOLANG.
    #. Добавление фрагментов транспилятора, порождающих код для функций без параметров и с глобальными переменными.
    #. Тестовые наборы для тестирования базовых операций с глобальными переменными.

Неделя 10 (01.10.2021 - 07.10.2021)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Разработка объекта имитирующего в EOLANG функции с параметрами по значению и с возвращаемым параметром языка программирования C с использованием также локальных переменных. Тестирование с использованием средств EOLANG доступа из данного объекта к объектам, имитирующим глобальные и локальные переменные простого типа, а также параметры и результат простого типа.
#. Разработка фрагментов транспилятора, обеспечивающих генерацию кода в EOLANG для функций языка C без параметров, но с локальными переменными простого типа и обращением к глобальным переменным простого типа.
#. Разработка тестового покрытия для проверки работоспособности транспилятора на функциях языка C без параметров, но с локальными переменными простого типа и обращением к глобальным переменным простого типа.
#. Формирование подмножества языка C используемого для трансформации в ходе трансляции.

Результат:

    #. Объект EOLANG, имитирующий функцию с параметрами и с локальными объектами.
    #. Тестовые наборы, для проверки семантической модели EOLANG.
    #. Добавление фрагментов транспилятора, порождающих код для функций без параметров но с глобальными переменными.
    #. Тестовые наборы для тестирования базовых операций с локальными и глобальными переменными.

Неделя 11 (08.10.2021 - 14.10.2021)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Разработка фрагментов транспилятора, обеспечивающих генерацию кода в EOLANG для функций языка C с параметрами и возвращаемым значением, с локальными переменными простого типа, обращением к глобальным переменным простого типа.
#. Разработка тестового покрытия для проверки работоспособности транспилятора на функциях языка C с параметров, локальными переменными простого типа и обращением к глобальным переменным простого типа.

Результат:

    #. Объект EOLANG, имитирующий функцию с параметрами, а также с локальными и глобальными объектами.
    #. Тестовые наборы, для проверки семантической модели EOLANG.
    #. Добавление фрагментов транспилятора, порождающих код для функций с параметрами, локальными и глобальными переменными.
    #. Тестовые наборы для тестирования базовых операций с параметрами, локальными и глобальными переменными.

Неделя 12 (15.10.2021 - 21.10.2021)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Комплексное тестирование и отладка прототипа транспилятора на простых типах данных и операциях с ними.
#. Подготовка демонстрационных примеров.

Результат:

    #. Отладка и тестирование прототипа транспилятора.

Неделя 13 (22.10.2021 - 28.10.2021)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Демонстрация работы.
#. Окончатеное формирование и сдача технического отчета с кратким описанием деталей реализации.

Результат:

    #. Демонстрационный прототип транспилятора.
    #. Отчет

