+package c2eo

+alias c2eo.examples.globalC
+alias c2eo.examples.operationsC
+alias c2eo.examples.overflowC
+alias c2eo.examples.factorialC
+alias c2eo.examples.fibonacciC
+alias c2eo.examples.piC
+alias c2eo.examples.switchC
+alias c2eo.examples.ifC
+alias c2eo.examples.whileC
+alias c2eo.examples.dowhileC
+alias c2eo.examples.forC
+alias c2eo.examples.simpleReturnC
+alias c2eo.examples.complexReturnC
+alias c2eo.examples.enum1C
+alias c2eo.examples.enum2C
+alias c2eo.examples.typeCastingC
+alias c2eo.examples.structC
+alias c2eo.examples.functionPointersC
+alias c2eo.examples.breakC
+alias c2eo.examples.continueC
+alias c2eo.examples.pointers1C
+alias c2eo.examples.pointers2C
+alias c2eo.examples.pointers3C
+alias c2eo.examples.nestedBlocksC
+alias c2eo.examples.nestedBlocksStaticC
+alias c2eo.examples.nestedBlocksMainC
+alias c2eo.collections.array
+alias c2eo.stdio.printf
+alias diagnostics.exception
+alias diagnostics.assert

# (breakC args).main
# (complexReturnC args).main
# (typeCastingC args).main
# (functionPointersC args).main
[args...] > app

  seq > @
    printf "\n"

    printf "globalC\n"
    globalC
    printf "\n"

    printf "operationsC\n"
    operationsC
    printf "\n"

    printf "overflowC\n"
    overflowC
    printf "\n"

    printf "factorialC\n"
    (factorialC args).main
    printf "\n"

    printf "fibonacciC\n"
    (fibonacciC args).main
    printf "\n"

    printf "piC\n"
    (piC args).main
    printf "\n"

    printf "switchC\n"
    (switchC args).main
    printf "\n"

    printf "ifC\n"
    (ifC args).main
    printf "\n"

    printf "whileC\n"
    (whileC args).main
    printf "\n\n"

    printf "dowhileC\n"
    (dowhileC args).main
    printf "\n\n"

    printf "forC\n"
    (forC args).main
    printf "\n\n"

    printf "simpleReturnC\n"
    (simpleReturnC args).main
    printf "\n"

    printf "enumC1\n"
    (enum1C args).main
    printf "\n"

    printf "enum2C\n"
    (enum2C args).main
    printf "\n"

    printf "structC\n"
    (structC args).main
    printf "\n"

    printf "continueC\n"
    (continueC args).main
    printf "\n"

    printf "pointers1C\n"
    (pointers1C args).main
    printf "\n\n"

    printf "pointers2C\n"
    (pointers2C args).main
    printf "\n"

    printf "pointers3C\n"
    (pointers3C args).main
    printf "\n"

    printf "nestedBlocksC\n"
    (nestedBlocksC args).main
    printf "\n"

    printf "nestedBlocksStaticC\n"
    (nestedBlocksStaticC args).main
    printf "\n"

    printf "nestedBlocksMainC\n"
    (nestedBlocksMainC args).main
    printf "\n"

    printf "array\n"
    printf "(array 1 2 3 4 5).length = %d" ((array 1 2 3 4 5).length)
    printf "\n"

    printf "\n\nFalse assert"
    assert FALSE "False assert work!"

    printf "\n\nexception\n"
    printf (exception "exception work!")

    printf "\n\nTrue assert"
    assert TRUE "True assert dont work"

    printf "\n\nprintf\n"
    printf "simple\n"
    printf "simple %d\n" 1
    printf "simple %d %d\n" 1 2
    printf "simple %d %d %d\n" 1 2 3
    printf "simple %d %d %d\n" 1 2 3 4 5 6 7 8 9
