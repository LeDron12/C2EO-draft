#ifndef __OBJECT__
#define __OBJECT__

/*
 * Заголовочный файл, используемый для описания базового объекта.
 * Помимо этого в нем также представлены атомарные объекты, определяемые
 * на уровне системы
 * 
 * Примечание.
 * Учитывая то, что все объекты Eolang являются открытыми, я решил не использовать
 * внутреннюю инкапсуляцию данных в соответствующих классах языка программирования
 * C++. В дальнейшем это решение можно пересмотреть, если это будет целесообразно.
 */

#include "common.h"

// Базовый класс определяющий основу всех объектов Eolang
struct EoAny {
    // Родительский объект
    EoAny *parent;
    // Имя формируемого объекта. Используется при генерации в Eolang
    // и при тестовых выводах
    std::string name;
    // Методы, обеспечивющие работу с объектом
    // Вычисление значения с растипизацией результата
    virtual EoAny* eval() = 0;
    // Отладочный вывод содержимого объекта
    virtual void debugOut() {
        std::cout << name;
    }
};

// Класс, задающий целочисленный объект Eolang
struct EoInt: EoAny {
    // Внутренние данные
    int arg;        // хранимое целочисленное значение
    // Объекты, находящиеся внутри данного объекта.
    // Реализация вынесена наружу для облегчения восприятия
    EoIntAdd add;
};

// Объект, реализующий сложение в целочисленном объекте
struct EoIntAdd: EoAny {
    int secondArg;
};

    
    
#endif // __OBJECT__
